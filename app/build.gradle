/*
 * Copyright (c) 2021 2bllw8
 * SPDX-License-Identifier: GPL-3.0-only
 */
plugins {
    id 'com.android.application'
    id "com.diffplug.spotless" version "6.5.1"
}

android {
    compileSdkVersion rootProject.ext.targetSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 16
        versionName '2.6.0'
        applicationId 'exe.bbll8.aeolus'
    }

    buildFeatures {
        buildConfig = false
    }

    compileOptions {
        sourceCompatibility rootProject.ext.sourceCompatibilityVersion
        targetCompatibility rootProject.ext.targetCompatibilityVersion
    }

    dependenciesInfo {
        includeInApk false
    }

    signingConfigs {
        if (rootProject.ext.keyStoreFile != null && rootProject.ext.keyStoreFile.exists()) {
            anemo {
                storeFile file(rootProject.ext.keyStoreFile)
                storePassword rootProject.ext.keyStorePassword
                keyAlias rootProject.ext.keyAlias
                keyPassword rootProject.ext.keyPassword
            }
        }
    }

    buildTypes {
        def useAnemoConfig = rootProject.ext.keyStoreFile != null
                && rootProject.ext.keyStoreFile.exists()

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            if (useAnemoConfig) {
                signingConfig = signingConfigs.named('exe.bbllw8.aeolus').get()
            }
        }
        debug {
            if (useAnemoConfig) {
                signingConfig = signingConfigs.named('exe.bbllw8.aeolus').get()
            }
        }
    }
}

dependencies {
    def androidxAnnotation = 'androidx.annotation:annotation:1.2.0'
    def eitherLib = 'io.github.2bllw8:either:3.4.0'

    implementation androidxAnnotation
    implementation eitherLib
}

spotless {
    java {
        target 'src/*/java/**/*.java'

        importOrder('android', 'androidx', 'java', 'javax', '')
        removeUnusedImports()

        eclipse().configFile('code-format.xml')
        endWithNewline()
    }

    format 'misc', {
        target '**/*.gradle', '**/*.md', '**/.gitignore'

        indentWithSpaces()
        trimTrailingWhitespace()
        endWithNewline()
    }
}

afterEvaluate {
    def spotlessCheck = tasks.findByName('spotlessCheck')
    if (spotlessCheck) {
        tasks.withType(JavaCompile) {
            finalizedBy(spotlessCheck)
        }
    }
}
